version: "3"

vars:
  GOLANG_CI_LINT_VERSION: v1.55.2
  GO_VERSION:
    sh: sed -En 's/^go (.*)$/\1/p' go.mod
  GO_MOD_CACHE_VOLUME: go-module-cache
  GIT_REPO_NAME:
    sh: basename $(git rev-parse --show-toplevel)
  GIT_REPO_OWNER: Y0sh1dk
  GIT_REPO_FULL: "{{ .GIT_REPO_OWNER }}/{{ .GIT_REPO_NAME }}"

tasks:
  create-go-mod-cache-volume:
    internal: true
    silent: true
    desc: Create the module cache volume
    cmds:
      - |
        docker volume create {{ .GO_MOD_CACHE_VOLUME }} > /dev/null 2>&1

  _go-docker: &go-docker
    internal: true
    deps:
      - task: create-go-mod-cache-volume
    cmds:
      - |
        docker run \
          --rm \
          -e GOOS={{ .GOOS }} \
          -e GOARCH={{ .GOARCH }} \
          -v $(pwd):/app \
          -v {{ .GO_MOD_CACHE_VOLUME }}:/go/pkg/mod \
          -w /app \
          golang:{{ .GO_VERSION }} \
          {{ .COMMAND }}

  _gomplate-docker: &gomplate-docker
    internal: true
    cmds:
      - |
        docker run \
          --rm \
          -e WORKFLOW_NAME={{ .WORKFLOW_NAME }} \
          -e ACTION_VERSION={{ .ACTION_VERSION }} \
          -v $(pwd):/app \
          -w /app \
          hairyhenderson/gomplate:stable \
          {{ .COMMAND }}

  _yq-docker: &yq-docker
    internal: true
    cmds:
      - |
        docker run \
          --rm \
          -e WORKFLOW_NAME={{ .WORKFLOW_NAME }} \
          -e ACTION_VERSION={{ .ACTION_VERSION }} \
          -v $(pwd):/app \
          --user="root" \
          -w /app \
          mikefarah/yq:latest \
          {{ .COMMAND }}

  build:
    <<: *go-docker
    internal: false
    desc: Build the application
    sources:
      - "*.go"
      - "go.mod"
      - "go.sum"
    generates:
      - "bin/{{ .GIT_REPO_NAME }}-{{ .GOOS }}-{{ .GOARCH }}"
    vars:
      GOOS: "{{ .GOOS | default OS }}"
      GOARCH: "{{ .GOARCH | default ARCH}}"
      COMMAND: go build -ldflags="-w -s" -o bin/{{ .GIT_REPO_NAME }}-{{ .GOOS }}-{{ .GOARCH }} *.go {{ .CLI_ARGS }}

  gen-tests:
    <<: *yq-docker
    internal: false
    desc: Generate test workflows
    requires:
      vars: [ACTION_VERSION]
    vars:
      ACTION_VERSION: "{{ .GIT_REPO_FULL}}@{{ .ACTION_VERSION }}"
      COMMAND: |
        -i '.jobs.[].steps[] |= (select(has("uses") and .uses == "{{ .GIT_REPO_FULL }}@*") | .uses = env(ACTION_VERSION))' .github/workflows/test.yaml

  build-all:
    desc: Build the application for all platforms
    vars:
      ALL_OS: linux darwin
      ALL_ARCH: amd64 arm64
    cmds:
      - |
        for os in {{ .ALL_OS }}; do
          for arch in {{ .ALL_ARCH }}; do
            echo "Building binary for $os/$arch..."
            GOOS=$os GOARCH=$arch task build &
          done
        done
        wait

  run:
    <<: *go-docker
    internal: false
    desc: Run the application
    vars:
      COMMAND: go run *.go

  format:
    <<: *go-docker
    internal: false
    desc: Format the application
    vars:
      COMMAND: go fmt ./...

  check-format:
    <<: *go-docker
    internal: false
    desc: Format the application
    vars:
      COMMAND: bash -c 'if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then exit 1; fi'

  lint:
    desc: Lint the application
    deps:
      - task: create-go-mod-cache-volume
    cmds:
      - |
        docker run \
          --rm \
          -v $(pwd):/app \
          -w /app \
          -v {{ .GO_MOD_CACHE_VOLUME }}:/go/pkg/mod \
          golangci/golangci-lint:{{ .GOLANG_CI_LINT_VERSION }} \
          golangci-lint run -v

  default:
    silent: true
    cmds:
      - task --list
